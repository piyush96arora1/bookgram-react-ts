{"version":3,"sources":["Components/Dialog.tsx","Components/BookListProvider.tsx","App.tsx","registerServiceWorker.ts","index.tsx"],"names":["Components_Dialog","props","book","react","Dialog_default","a","open","openDialog","disableEscapeKeyDown","onClose","onSave","DialogTitle_default","bookData","bookName","DialogContent_default","className","src","bookAvatar","DialogContentText_default","bookExcerpt","TextField_default","type","onChange","e","author","target","value","bookModified","tslib_es6","defaultValue","DialogActions_default","Button_default","onClick","Components_BookListProvider","_super","BookListProvider","_this","call","this","onRatingClicked","y","bookArray","state","findIndex","x","bookId","likes","setState","showDialogBox","books","showDialog","deleteBook","filter","b","prototype","componentDidMount","data","render","cards","map","Delete_default","src_App_0","App","__webpack_require__","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","react_dom","document","getElementById","URL","toString","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.7f7e55dc.chunk.js","sourcesContent":["import * as React from 'react'\r\nimport { IBook } from '../Models/Ibook'\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Button from '@material-ui/core/Button';\r\n import TextField from '@material-ui/core/TextField';\r\n\r\n\r\ninterface IDialogProps {\r\n    bookData: IBook\r\n    openDialog: boolean\r\n    onSave: (x:any)=>void;\r\n}\r\n\r\n\r\nconst DialogViewer = (props: IDialogProps) => {\r\n    let book:IBook|null;\r\n    const onSave = () => {\r\n       return props.onSave(book)\r\n    }\r\n    const handleAuthorChange=(event:any)=>{\r\n        // event.preventDefault();\r\n        const author=event.target.value;\r\n        const bookModified:IBook={...props.bookData,author}\r\n        book=bookModified;\r\n    }\r\n    return (\r\n        <Dialog open={props.openDialog}    disableEscapeKeyDown\r\n         onClose={()=>{props.onSave(book)}}>\r\n\r\n            <DialogTitle>{props.bookData.bookName}</DialogTitle>\r\n            <DialogContent>\r\n                <div className=\"layout-row layout-align-space-between-stretch\">\r\n                <div className=\"flex\">\r\n                    <img src={props.bookData.bookAvatar}/>\r\n                </div>\r\n                <div className=\"flex layout-column layout-padding\">\r\n                <DialogContentText>{props.bookData.bookExcerpt}</DialogContentText>\r\n                <TextField type=\"text\" onChange={e=>handleAuthorChange(e)} defaultValue={props.bookData.author}  />\r\n                </div>\r\n                </div>\r\n                <DialogActions>\r\n\r\n                    <Button onClick={() => { onSave() }}>Save</Button>\r\n\r\n                </DialogActions>\r\n            </DialogContent>\r\n        </Dialog>\r\n\r\n    )\r\n\r\n}\r\nexport default DialogViewer","import * as React from 'react'\r\nimport { IBook } from '../Models/Ibook'\r\nimport DialogViewer from './Dialog'\r\nimport './booklist.css'\r\nimport Button from '@material-ui/core/Button';\r\nimport Delete from '@material-ui/icons/Delete'\r\ninterface IBookProps {\r\n    bookData: IBook[]\r\n}\r\ninterface IbookState {\r\n    bookData: IBook[];\r\n    book:IBook|null;\r\n    showDialog: boolean\r\n}\r\n// const styles={card:{minWidth:275,height:150}}\r\nclass BookListProvider extends React.Component<IBookProps, IbookState>{\r\n    public state: IbookState;\r\n    public props: IBookProps\r\n    constructor(props: IBookProps) {\r\n        super(props)\r\n        this.state = { bookData: [], showDialog: false,book:null}\r\n\r\n    }\r\n    public componentDidMount() {\r\n\r\n        const data = this.props.bookData\r\n        this.setState({ bookData: data })\r\n    }\r\n    public onRatingClicked = (e: any, y: any) => {\r\n        const bookArray: IBook[] = this.state.bookData\r\n        const bookIndex = this.state.bookData.findIndex((x => x.bookId === y))\r\n        bookArray[bookIndex].likes += 1\r\n        this.setState({ bookData: bookArray })\r\n\r\n    };\r\n    public showDialogBox = (books: IBook) => {\r\n        this.setState({ showDialog: true,book:books})\r\n    \r\n      //  return ()\r\n    }\r\n    public deleteBook=(x:any)=>{\r\n        const book=this.state.bookData.filter(b=>b.bookId!==x)\r\n        this.setState({bookData:book})\r\n    }\r\n    public onSave =(book:IBook)=>{\r\n        if(book!=null)\r\n       {\r\n        const bookArray: IBook[] = this.state.bookData\r\n        const bookIndex = this.state.bookData.findIndex((x => x.bookId === book.bookId))\r\n        bookArray[bookIndex].author=book.author;\r\n        this.setState({bookData:bookArray,showDialog:false})\r\n       }\r\n       this.setState({showDialog:false})\r\n    }\r\n    public render() {\r\n        const cards = this.state.bookData.map((x) =>\r\n            <div className=\"card\">\r\n                <img src={x.bookAvatar} />\r\n                <div className=\"card-content\">\r\n                    <span>{x.author}</span>\r\n                    <p>{x.bookName}</p>\r\n                    <span onClick={(e) => this.onRatingClicked(e, x.bookId)}>{x.likes}</span>\r\n                    <Button onClick={()=>{this.showDialogBox(x)}}>Open</Button>\r\n                  <Button onClick={()=>{this.deleteBook(x.bookId)}}>  <Delete/></Button>\r\n                </div>\r\n            </div>\r\n        )\r\n        return (<React.Fragment>\r\n         {this.state.book && this.state.showDialog && <DialogViewer onSave={this.onSave} bookData={this.state.book} openDialog={true}></DialogViewer>}\r\n            <div className=\"wrapper\">{cards}</div>\r\n        \r\n        </React.Fragment>)\r\n    }\r\n}\r\n\r\nexport default BookListProvider","import * as React from 'react';\r\nimport './App.css';\r\nimport { IBook } from './Models/Ibook'\r\nimport BookListProvider from './Components/BookListProvider'\r\nclass App extends React.Component {\r\n  public render() {\r\n    const books: IBook[] = require('./Data/Book.json').books\r\n    // tslint:disable-next-line:no-console\r\n    // console.log(\"hi\"+books.author)\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\"></header>\r\n        <BookListProvider bookData={books} />\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root') as HTMLElement\n);\nregisterServiceWorker();\n"],"sourceRoot":""}